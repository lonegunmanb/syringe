// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lonegunmanb/syrinx (interfaces: Walker)

// Package syrinx is a generated GoMock package.
package syrinx

import (
	gomock "github.com/golang/mock/gomock"
	ast "go/ast"
	reflect "reflect"
)

// MockWalker is a mock of Walker interface
type MockWalker struct {
	ctrl     *gomock.Controller
	recorder *MockWalkerMockRecorder
}

// MockWalkerMockRecorder is the mock recorder for MockWalker
type MockWalkerMockRecorder struct {
	mock *MockWalker
}

// NewMockWalker creates a new mock instance
func NewMockWalker(ctrl *gomock.Controller) *MockWalker {
	mock := &MockWalker{ctrl: ctrl}
	mock.recorder = &MockWalkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWalker) EXPECT() *MockWalkerMockRecorder {
	return m.recorder
}

// BeginWalk mocks base method
func (m *MockWalker) BeginWalk(arg0 ast.Node) Walker {
	ret := m.ctrl.Call(m, "BeginWalk", arg0)
	ret0, _ := ret[0].(Walker)
	return ret0
}

// BeginWalk indicates an expected call of BeginWalk
func (mr *MockWalkerMockRecorder) BeginWalk(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginWalk", reflect.TypeOf((*MockWalker)(nil).BeginWalk), arg0)
}

// EndWalk mocks base method
func (m *MockWalker) EndWalk(arg0 ast.Node) {
	m.ctrl.Call(m, "EndWalk", arg0)
}

// EndWalk indicates an expected call of EndWalk
func (mr *MockWalkerMockRecorder) EndWalk(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalk", reflect.TypeOf((*MockWalker)(nil).EndWalk), arg0)
}

// EndWalkArrayType mocks base method
func (m *MockWalker) EndWalkArrayType(arg0 *ast.ArrayType) {
	m.ctrl.Call(m, "EndWalkArrayType", arg0)
}

// EndWalkArrayType indicates an expected call of EndWalkArrayType
func (mr *MockWalkerMockRecorder) EndWalkArrayType(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkArrayType", reflect.TypeOf((*MockWalker)(nil).EndWalkArrayType), arg0)
}

// EndWalkAssignStmt mocks base method
func (m *MockWalker) EndWalkAssignStmt(arg0 *ast.AssignStmt) {
	m.ctrl.Call(m, "EndWalkAssignStmt", arg0)
}

// EndWalkAssignStmt indicates an expected call of EndWalkAssignStmt
func (mr *MockWalkerMockRecorder) EndWalkAssignStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkAssignStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkAssignStmt), arg0)
}

// EndWalkBinary mocks base method
func (m *MockWalker) EndWalkBinary(arg0 *ast.BinaryExpr) {
	m.ctrl.Call(m, "EndWalkBinary", arg0)
}

// EndWalkBinary indicates an expected call of EndWalkBinary
func (mr *MockWalkerMockRecorder) EndWalkBinary(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkBinary", reflect.TypeOf((*MockWalker)(nil).EndWalkBinary), arg0)
}

// EndWalkBlockStmt mocks base method
func (m *MockWalker) EndWalkBlockStmt(arg0 *ast.BlockStmt) {
	m.ctrl.Call(m, "EndWalkBlockStmt", arg0)
}

// EndWalkBlockStmt indicates an expected call of EndWalkBlockStmt
func (mr *MockWalkerMockRecorder) EndWalkBlockStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkBlockStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkBlockStmt), arg0)
}

// EndWalkBranchStmt mocks base method
func (m *MockWalker) EndWalkBranchStmt(arg0 *ast.BranchStmt) {
	m.ctrl.Call(m, "EndWalkBranchStmt", arg0)
}

// EndWalkBranchStmt indicates an expected call of EndWalkBranchStmt
func (mr *MockWalkerMockRecorder) EndWalkBranchStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkBranchStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkBranchStmt), arg0)
}

// EndWalkCall mocks base method
func (m *MockWalker) EndWalkCall(arg0 *ast.CallExpr) {
	m.ctrl.Call(m, "EndWalkCall", arg0)
}

// EndWalkCall indicates an expected call of EndWalkCall
func (mr *MockWalkerMockRecorder) EndWalkCall(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkCall", reflect.TypeOf((*MockWalker)(nil).EndWalkCall), arg0)
}

// EndWalkCaseClause mocks base method
func (m *MockWalker) EndWalkCaseClause(arg0 *ast.CaseClause) {
	m.ctrl.Call(m, "EndWalkCaseClause", arg0)
}

// EndWalkCaseClause indicates an expected call of EndWalkCaseClause
func (mr *MockWalkerMockRecorder) EndWalkCaseClause(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkCaseClause", reflect.TypeOf((*MockWalker)(nil).EndWalkCaseClause), arg0)
}

// EndWalkChan mocks base method
func (m *MockWalker) EndWalkChan(arg0 *ast.ChanType) {
	m.ctrl.Call(m, "EndWalkChan", arg0)
}

// EndWalkChan indicates an expected call of EndWalkChan
func (mr *MockWalkerMockRecorder) EndWalkChan(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkChan", reflect.TypeOf((*MockWalker)(nil).EndWalkChan), arg0)
}

// EndWalkCommClause mocks base method
func (m *MockWalker) EndWalkCommClause(arg0 *ast.CommClause) {
	m.ctrl.Call(m, "EndWalkCommClause", arg0)
}

// EndWalkCommClause indicates an expected call of EndWalkCommClause
func (mr *MockWalkerMockRecorder) EndWalkCommClause(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkCommClause", reflect.TypeOf((*MockWalker)(nil).EndWalkCommClause), arg0)
}

// EndWalkComment mocks base method
func (m *MockWalker) EndWalkComment(arg0 *ast.Comment) {
	m.ctrl.Call(m, "EndWalkComment", arg0)
}

// EndWalkComment indicates an expected call of EndWalkComment
func (mr *MockWalkerMockRecorder) EndWalkComment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkComment", reflect.TypeOf((*MockWalker)(nil).EndWalkComment), arg0)
}

// EndWalkCommentGroup mocks base method
func (m *MockWalker) EndWalkCommentGroup(arg0 *ast.CommentGroup) {
	m.ctrl.Call(m, "EndWalkCommentGroup", arg0)
}

// EndWalkCommentGroup indicates an expected call of EndWalkCommentGroup
func (mr *MockWalkerMockRecorder) EndWalkCommentGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkCommentGroup", reflect.TypeOf((*MockWalker)(nil).EndWalkCommentGroup), arg0)
}

// EndWalkCompositeLit mocks base method
func (m *MockWalker) EndWalkCompositeLit(arg0 *ast.CompositeLit) {
	m.ctrl.Call(m, "EndWalkCompositeLit", arg0)
}

// EndWalkCompositeLit indicates an expected call of EndWalkCompositeLit
func (mr *MockWalkerMockRecorder) EndWalkCompositeLit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkCompositeLit", reflect.TypeOf((*MockWalker)(nil).EndWalkCompositeLit), arg0)
}

// EndWalkDeclStmt mocks base method
func (m *MockWalker) EndWalkDeclStmt(arg0 *ast.DeclStmt) {
	m.ctrl.Call(m, "EndWalkDeclStmt", arg0)
}

// EndWalkDeclStmt indicates an expected call of EndWalkDeclStmt
func (mr *MockWalkerMockRecorder) EndWalkDeclStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkDeclStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkDeclStmt), arg0)
}

// EndWalkDeferStmt mocks base method
func (m *MockWalker) EndWalkDeferStmt(arg0 *ast.DeferStmt) {
	m.ctrl.Call(m, "EndWalkDeferStmt", arg0)
}

// EndWalkDeferStmt indicates an expected call of EndWalkDeferStmt
func (mr *MockWalkerMockRecorder) EndWalkDeferStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkDeferStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkDeferStmt), arg0)
}

// EndWalkEllipsis mocks base method
func (m *MockWalker) EndWalkEllipsis(arg0 *ast.Ellipsis) {
	m.ctrl.Call(m, "EndWalkEllipsis", arg0)
}

// EndWalkEllipsis indicates an expected call of EndWalkEllipsis
func (mr *MockWalkerMockRecorder) EndWalkEllipsis(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkEllipsis", reflect.TypeOf((*MockWalker)(nil).EndWalkEllipsis), arg0)
}

// EndWalkExprStmt mocks base method
func (m *MockWalker) EndWalkExprStmt(arg0 *ast.ExprStmt) {
	m.ctrl.Call(m, "EndWalkExprStmt", arg0)
}

// EndWalkExprStmt indicates an expected call of EndWalkExprStmt
func (mr *MockWalkerMockRecorder) EndWalkExprStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkExprStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkExprStmt), arg0)
}

// EndWalkField mocks base method
func (m *MockWalker) EndWalkField(arg0 *ast.Field) {
	m.ctrl.Call(m, "EndWalkField", arg0)
}

// EndWalkField indicates an expected call of EndWalkField
func (mr *MockWalkerMockRecorder) EndWalkField(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkField", reflect.TypeOf((*MockWalker)(nil).EndWalkField), arg0)
}

// EndWalkFieldList mocks base method
func (m *MockWalker) EndWalkFieldList(arg0 *ast.FieldList) {
	m.ctrl.Call(m, "EndWalkFieldList", arg0)
}

// EndWalkFieldList indicates an expected call of EndWalkFieldList
func (mr *MockWalkerMockRecorder) EndWalkFieldList(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkFieldList", reflect.TypeOf((*MockWalker)(nil).EndWalkFieldList), arg0)
}

// EndWalkFile mocks base method
func (m *MockWalker) EndWalkFile(arg0 *ast.File) {
	m.ctrl.Call(m, "EndWalkFile", arg0)
}

// EndWalkFile indicates an expected call of EndWalkFile
func (mr *MockWalkerMockRecorder) EndWalkFile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkFile", reflect.TypeOf((*MockWalker)(nil).EndWalkFile), arg0)
}

// EndWalkForStmt mocks base method
func (m *MockWalker) EndWalkForStmt(arg0 *ast.ForStmt) {
	m.ctrl.Call(m, "EndWalkForStmt", arg0)
}

// EndWalkForStmt indicates an expected call of EndWalkForStmt
func (mr *MockWalkerMockRecorder) EndWalkForStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkForStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkForStmt), arg0)
}

// EndWalkFunc mocks base method
func (m *MockWalker) EndWalkFunc(arg0 *ast.FuncType) {
	m.ctrl.Call(m, "EndWalkFunc", arg0)
}

// EndWalkFunc indicates an expected call of EndWalkFunc
func (mr *MockWalkerMockRecorder) EndWalkFunc(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkFunc", reflect.TypeOf((*MockWalker)(nil).EndWalkFunc), arg0)
}

// EndWalkFuncDecl mocks base method
func (m *MockWalker) EndWalkFuncDecl(arg0 *ast.FuncDecl) {
	m.ctrl.Call(m, "EndWalkFuncDecl", arg0)
}

// EndWalkFuncDecl indicates an expected call of EndWalkFuncDecl
func (mr *MockWalkerMockRecorder) EndWalkFuncDecl(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkFuncDecl", reflect.TypeOf((*MockWalker)(nil).EndWalkFuncDecl), arg0)
}

// EndWalkFuncLit mocks base method
func (m *MockWalker) EndWalkFuncLit(arg0 *ast.FuncLit) {
	m.ctrl.Call(m, "EndWalkFuncLit", arg0)
}

// EndWalkFuncLit indicates an expected call of EndWalkFuncLit
func (mr *MockWalkerMockRecorder) EndWalkFuncLit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkFuncLit", reflect.TypeOf((*MockWalker)(nil).EndWalkFuncLit), arg0)
}

// EndWalkGenDecl mocks base method
func (m *MockWalker) EndWalkGenDecl(arg0 *ast.GenDecl) {
	m.ctrl.Call(m, "EndWalkGenDecl", arg0)
}

// EndWalkGenDecl indicates an expected call of EndWalkGenDecl
func (mr *MockWalkerMockRecorder) EndWalkGenDecl(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkGenDecl", reflect.TypeOf((*MockWalker)(nil).EndWalkGenDecl), arg0)
}

// EndWalkGoStmt mocks base method
func (m *MockWalker) EndWalkGoStmt(arg0 *ast.GoStmt) {
	m.ctrl.Call(m, "EndWalkGoStmt", arg0)
}

// EndWalkGoStmt indicates an expected call of EndWalkGoStmt
func (mr *MockWalkerMockRecorder) EndWalkGoStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkGoStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkGoStmt), arg0)
}

// EndWalkIfStmt mocks base method
func (m *MockWalker) EndWalkIfStmt(arg0 *ast.IfStmt) {
	m.ctrl.Call(m, "EndWalkIfStmt", arg0)
}

// EndWalkIfStmt indicates an expected call of EndWalkIfStmt
func (mr *MockWalkerMockRecorder) EndWalkIfStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkIfStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkIfStmt), arg0)
}

// EndWalkImportSpec mocks base method
func (m *MockWalker) EndWalkImportSpec(arg0 *ast.ImportSpec) {
	m.ctrl.Call(m, "EndWalkImportSpec", arg0)
}

// EndWalkImportSpec indicates an expected call of EndWalkImportSpec
func (mr *MockWalkerMockRecorder) EndWalkImportSpec(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkImportSpec", reflect.TypeOf((*MockWalker)(nil).EndWalkImportSpec), arg0)
}

// EndWalkIncDecStmt mocks base method
func (m *MockWalker) EndWalkIncDecStmt(arg0 *ast.IncDecStmt) {
	m.ctrl.Call(m, "EndWalkIncDecStmt", arg0)
}

// EndWalkIncDecStmt indicates an expected call of EndWalkIncDecStmt
func (mr *MockWalkerMockRecorder) EndWalkIncDecStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkIncDecStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkIncDecStmt), arg0)
}

// EndWalkIndex mocks base method
func (m *MockWalker) EndWalkIndex(arg0 *ast.IndexExpr) {
	m.ctrl.Call(m, "EndWalkIndex", arg0)
}

// EndWalkIndex indicates an expected call of EndWalkIndex
func (mr *MockWalkerMockRecorder) EndWalkIndex(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkIndex", reflect.TypeOf((*MockWalker)(nil).EndWalkIndex), arg0)
}

// EndWalkInterface mocks base method
func (m *MockWalker) EndWalkInterface(arg0 *ast.InterfaceType) {
	m.ctrl.Call(m, "EndWalkInterface", arg0)
}

// EndWalkInterface indicates an expected call of EndWalkInterface
func (mr *MockWalkerMockRecorder) EndWalkInterface(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkInterface", reflect.TypeOf((*MockWalker)(nil).EndWalkInterface), arg0)
}

// EndWalkKeyValue mocks base method
func (m *MockWalker) EndWalkKeyValue(arg0 *ast.KeyValueExpr) {
	m.ctrl.Call(m, "EndWalkKeyValue", arg0)
}

// EndWalkKeyValue indicates an expected call of EndWalkKeyValue
func (mr *MockWalkerMockRecorder) EndWalkKeyValue(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkKeyValue", reflect.TypeOf((*MockWalker)(nil).EndWalkKeyValue), arg0)
}

// EndWalkLabeledStmt mocks base method
func (m *MockWalker) EndWalkLabeledStmt(arg0 *ast.LabeledStmt) {
	m.ctrl.Call(m, "EndWalkLabeledStmt", arg0)
}

// EndWalkLabeledStmt indicates an expected call of EndWalkLabeledStmt
func (mr *MockWalkerMockRecorder) EndWalkLabeledStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkLabeledStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkLabeledStmt), arg0)
}

// EndWalkMap mocks base method
func (m *MockWalker) EndWalkMap(arg0 *ast.MapType) {
	m.ctrl.Call(m, "EndWalkMap", arg0)
}

// EndWalkMap indicates an expected call of EndWalkMap
func (mr *MockWalkerMockRecorder) EndWalkMap(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkMap", reflect.TypeOf((*MockWalker)(nil).EndWalkMap), arg0)
}

// EndWalkPackage mocks base method
func (m *MockWalker) EndWalkPackage(arg0 *ast.Package) {
	m.ctrl.Call(m, "EndWalkPackage", arg0)
}

// EndWalkPackage indicates an expected call of EndWalkPackage
func (mr *MockWalkerMockRecorder) EndWalkPackage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkPackage", reflect.TypeOf((*MockWalker)(nil).EndWalkPackage), arg0)
}

// EndWalkParen mocks base method
func (m *MockWalker) EndWalkParen(arg0 *ast.ParenExpr) {
	m.ctrl.Call(m, "EndWalkParen", arg0)
}

// EndWalkParen indicates an expected call of EndWalkParen
func (mr *MockWalkerMockRecorder) EndWalkParen(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkParen", reflect.TypeOf((*MockWalker)(nil).EndWalkParen), arg0)
}

// EndWalkRangeStmt mocks base method
func (m *MockWalker) EndWalkRangeStmt(arg0 *ast.RangeStmt) {
	m.ctrl.Call(m, "EndWalkRangeStmt", arg0)
}

// EndWalkRangeStmt indicates an expected call of EndWalkRangeStmt
func (mr *MockWalkerMockRecorder) EndWalkRangeStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkRangeStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkRangeStmt), arg0)
}

// EndWalkReturnStmt mocks base method
func (m *MockWalker) EndWalkReturnStmt(arg0 *ast.ReturnStmt) {
	m.ctrl.Call(m, "EndWalkReturnStmt", arg0)
}

// EndWalkReturnStmt indicates an expected call of EndWalkReturnStmt
func (mr *MockWalkerMockRecorder) EndWalkReturnStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkReturnStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkReturnStmt), arg0)
}

// EndWalkSelectStmt mocks base method
func (m *MockWalker) EndWalkSelectStmt(arg0 *ast.SelectStmt) {
	m.ctrl.Call(m, "EndWalkSelectStmt", arg0)
}

// EndWalkSelectStmt indicates an expected call of EndWalkSelectStmt
func (mr *MockWalkerMockRecorder) EndWalkSelectStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkSelectStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkSelectStmt), arg0)
}

// EndWalkSelector mocks base method
func (m *MockWalker) EndWalkSelector(arg0 *ast.SelectorExpr) {
	m.ctrl.Call(m, "EndWalkSelector", arg0)
}

// EndWalkSelector indicates an expected call of EndWalkSelector
func (mr *MockWalkerMockRecorder) EndWalkSelector(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkSelector", reflect.TypeOf((*MockWalker)(nil).EndWalkSelector), arg0)
}

// EndWalkSendStmt mocks base method
func (m *MockWalker) EndWalkSendStmt(arg0 *ast.SendStmt) {
	m.ctrl.Call(m, "EndWalkSendStmt", arg0)
}

// EndWalkSendStmt indicates an expected call of EndWalkSendStmt
func (mr *MockWalkerMockRecorder) EndWalkSendStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkSendStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkSendStmt), arg0)
}

// EndWalkSlice mocks base method
func (m *MockWalker) EndWalkSlice(arg0 *ast.SliceExpr) {
	m.ctrl.Call(m, "EndWalkSlice", arg0)
}

// EndWalkSlice indicates an expected call of EndWalkSlice
func (mr *MockWalkerMockRecorder) EndWalkSlice(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkSlice", reflect.TypeOf((*MockWalker)(nil).EndWalkSlice), arg0)
}

// EndWalkStar mocks base method
func (m *MockWalker) EndWalkStar(arg0 *ast.StarExpr) {
	m.ctrl.Call(m, "EndWalkStar", arg0)
}

// EndWalkStar indicates an expected call of EndWalkStar
func (mr *MockWalkerMockRecorder) EndWalkStar(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkStar", reflect.TypeOf((*MockWalker)(nil).EndWalkStar), arg0)
}

// EndWalkStruct mocks base method
func (m *MockWalker) EndWalkStruct(arg0 *ast.StructType) {
	m.ctrl.Call(m, "EndWalkStruct", arg0)
}

// EndWalkStruct indicates an expected call of EndWalkStruct
func (mr *MockWalkerMockRecorder) EndWalkStruct(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkStruct", reflect.TypeOf((*MockWalker)(nil).EndWalkStruct), arg0)
}

// EndWalkSwitchStmt mocks base method
func (m *MockWalker) EndWalkSwitchStmt(arg0 *ast.SwitchStmt) {
	m.ctrl.Call(m, "EndWalkSwitchStmt", arg0)
}

// EndWalkSwitchStmt indicates an expected call of EndWalkSwitchStmt
func (mr *MockWalkerMockRecorder) EndWalkSwitchStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkSwitchStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkSwitchStmt), arg0)
}

// EndWalkTypeAssert mocks base method
func (m *MockWalker) EndWalkTypeAssert(arg0 *ast.TypeAssertExpr) {
	m.ctrl.Call(m, "EndWalkTypeAssert", arg0)
}

// EndWalkTypeAssert indicates an expected call of EndWalkTypeAssert
func (mr *MockWalkerMockRecorder) EndWalkTypeAssert(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkTypeAssert", reflect.TypeOf((*MockWalker)(nil).EndWalkTypeAssert), arg0)
}

// EndWalkTypeSpec mocks base method
func (m *MockWalker) EndWalkTypeSpec(arg0 *ast.TypeSpec) {
	m.ctrl.Call(m, "EndWalkTypeSpec", arg0)
}

// EndWalkTypeSpec indicates an expected call of EndWalkTypeSpec
func (mr *MockWalkerMockRecorder) EndWalkTypeSpec(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkTypeSpec", reflect.TypeOf((*MockWalker)(nil).EndWalkTypeSpec), arg0)
}

// EndWalkTypeSwitchStmt mocks base method
func (m *MockWalker) EndWalkTypeSwitchStmt(arg0 *ast.TypeSwitchStmt) {
	m.ctrl.Call(m, "EndWalkTypeSwitchStmt", arg0)
}

// EndWalkTypeSwitchStmt indicates an expected call of EndWalkTypeSwitchStmt
func (mr *MockWalkerMockRecorder) EndWalkTypeSwitchStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkTypeSwitchStmt", reflect.TypeOf((*MockWalker)(nil).EndWalkTypeSwitchStmt), arg0)
}

// EndWalkUnary mocks base method
func (m *MockWalker) EndWalkUnary(arg0 *ast.UnaryExpr) {
	m.ctrl.Call(m, "EndWalkUnary", arg0)
}

// EndWalkUnary indicates an expected call of EndWalkUnary
func (mr *MockWalkerMockRecorder) EndWalkUnary(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkUnary", reflect.TypeOf((*MockWalker)(nil).EndWalkUnary), arg0)
}

// EndWalkValueSpec mocks base method
func (m *MockWalker) EndWalkValueSpec(arg0 *ast.ValueSpec) {
	m.ctrl.Call(m, "EndWalkValueSpec", arg0)
}

// EndWalkValueSpec indicates an expected call of EndWalkValueSpec
func (mr *MockWalkerMockRecorder) EndWalkValueSpec(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndWalkValueSpec", reflect.TypeOf((*MockWalker)(nil).EndWalkValueSpec), arg0)
}

// WalkArrayType mocks base method
func (m *MockWalker) WalkArrayType(arg0 *ast.ArrayType) {
	m.ctrl.Call(m, "WalkArrayType", arg0)
}

// WalkArrayType indicates an expected call of WalkArrayType
func (mr *MockWalkerMockRecorder) WalkArrayType(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkArrayType", reflect.TypeOf((*MockWalker)(nil).WalkArrayType), arg0)
}

// WalkAssignStmt mocks base method
func (m *MockWalker) WalkAssignStmt(arg0 *ast.AssignStmt) {
	m.ctrl.Call(m, "WalkAssignStmt", arg0)
}

// WalkAssignStmt indicates an expected call of WalkAssignStmt
func (mr *MockWalkerMockRecorder) WalkAssignStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkAssignStmt", reflect.TypeOf((*MockWalker)(nil).WalkAssignStmt), arg0)
}

// WalkBinary mocks base method
func (m *MockWalker) WalkBinary(arg0 *ast.BinaryExpr) {
	m.ctrl.Call(m, "WalkBinary", arg0)
}

// WalkBinary indicates an expected call of WalkBinary
func (mr *MockWalkerMockRecorder) WalkBinary(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkBinary", reflect.TypeOf((*MockWalker)(nil).WalkBinary), arg0)
}

// WalkBlockStmt mocks base method
func (m *MockWalker) WalkBlockStmt(arg0 *ast.BlockStmt) {
	m.ctrl.Call(m, "WalkBlockStmt", arg0)
}

// WalkBlockStmt indicates an expected call of WalkBlockStmt
func (mr *MockWalkerMockRecorder) WalkBlockStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkBlockStmt", reflect.TypeOf((*MockWalker)(nil).WalkBlockStmt), arg0)
}

// WalkBranchStmt mocks base method
func (m *MockWalker) WalkBranchStmt(arg0 *ast.BranchStmt) {
	m.ctrl.Call(m, "WalkBranchStmt", arg0)
}

// WalkBranchStmt indicates an expected call of WalkBranchStmt
func (mr *MockWalkerMockRecorder) WalkBranchStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkBranchStmt", reflect.TypeOf((*MockWalker)(nil).WalkBranchStmt), arg0)
}

// WalkCall mocks base method
func (m *MockWalker) WalkCall(arg0 *ast.CallExpr) {
	m.ctrl.Call(m, "WalkCall", arg0)
}

// WalkCall indicates an expected call of WalkCall
func (mr *MockWalkerMockRecorder) WalkCall(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkCall", reflect.TypeOf((*MockWalker)(nil).WalkCall), arg0)
}

// WalkCaseClause mocks base method
func (m *MockWalker) WalkCaseClause(arg0 *ast.CaseClause) {
	m.ctrl.Call(m, "WalkCaseClause", arg0)
}

// WalkCaseClause indicates an expected call of WalkCaseClause
func (mr *MockWalkerMockRecorder) WalkCaseClause(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkCaseClause", reflect.TypeOf((*MockWalker)(nil).WalkCaseClause), arg0)
}

// WalkChan mocks base method
func (m *MockWalker) WalkChan(arg0 *ast.ChanType) {
	m.ctrl.Call(m, "WalkChan", arg0)
}

// WalkChan indicates an expected call of WalkChan
func (mr *MockWalkerMockRecorder) WalkChan(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkChan", reflect.TypeOf((*MockWalker)(nil).WalkChan), arg0)
}

// WalkCommClause mocks base method
func (m *MockWalker) WalkCommClause(arg0 *ast.CommClause) {
	m.ctrl.Call(m, "WalkCommClause", arg0)
}

// WalkCommClause indicates an expected call of WalkCommClause
func (mr *MockWalkerMockRecorder) WalkCommClause(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkCommClause", reflect.TypeOf((*MockWalker)(nil).WalkCommClause), arg0)
}

// WalkComment mocks base method
func (m *MockWalker) WalkComment(arg0 *ast.Comment) {
	m.ctrl.Call(m, "WalkComment", arg0)
}

// WalkComment indicates an expected call of WalkComment
func (mr *MockWalkerMockRecorder) WalkComment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkComment", reflect.TypeOf((*MockWalker)(nil).WalkComment), arg0)
}

// WalkCommentGroup mocks base method
func (m *MockWalker) WalkCommentGroup(arg0 *ast.CommentGroup) {
	m.ctrl.Call(m, "WalkCommentGroup", arg0)
}

// WalkCommentGroup indicates an expected call of WalkCommentGroup
func (mr *MockWalkerMockRecorder) WalkCommentGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkCommentGroup", reflect.TypeOf((*MockWalker)(nil).WalkCommentGroup), arg0)
}

// WalkCompositeLit mocks base method
func (m *MockWalker) WalkCompositeLit(arg0 *ast.CompositeLit) {
	m.ctrl.Call(m, "WalkCompositeLit", arg0)
}

// WalkCompositeLit indicates an expected call of WalkCompositeLit
func (mr *MockWalkerMockRecorder) WalkCompositeLit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkCompositeLit", reflect.TypeOf((*MockWalker)(nil).WalkCompositeLit), arg0)
}

// WalkDeclStmt mocks base method
func (m *MockWalker) WalkDeclStmt(arg0 *ast.DeclStmt) {
	m.ctrl.Call(m, "WalkDeclStmt", arg0)
}

// WalkDeclStmt indicates an expected call of WalkDeclStmt
func (mr *MockWalkerMockRecorder) WalkDeclStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkDeclStmt", reflect.TypeOf((*MockWalker)(nil).WalkDeclStmt), arg0)
}

// WalkDeferStmt mocks base method
func (m *MockWalker) WalkDeferStmt(arg0 *ast.DeferStmt) {
	m.ctrl.Call(m, "WalkDeferStmt", arg0)
}

// WalkDeferStmt indicates an expected call of WalkDeferStmt
func (mr *MockWalkerMockRecorder) WalkDeferStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkDeferStmt", reflect.TypeOf((*MockWalker)(nil).WalkDeferStmt), arg0)
}

// WalkEllipsis mocks base method
func (m *MockWalker) WalkEllipsis(arg0 *ast.Ellipsis) {
	m.ctrl.Call(m, "WalkEllipsis", arg0)
}

// WalkEllipsis indicates an expected call of WalkEllipsis
func (mr *MockWalkerMockRecorder) WalkEllipsis(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkEllipsis", reflect.TypeOf((*MockWalker)(nil).WalkEllipsis), arg0)
}

// WalkExprStmt mocks base method
func (m *MockWalker) WalkExprStmt(arg0 *ast.ExprStmt) {
	m.ctrl.Call(m, "WalkExprStmt", arg0)
}

// WalkExprStmt indicates an expected call of WalkExprStmt
func (mr *MockWalkerMockRecorder) WalkExprStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkExprStmt", reflect.TypeOf((*MockWalker)(nil).WalkExprStmt), arg0)
}

// WalkField mocks base method
func (m *MockWalker) WalkField(arg0 *ast.Field) {
	m.ctrl.Call(m, "WalkField", arg0)
}

// WalkField indicates an expected call of WalkField
func (mr *MockWalkerMockRecorder) WalkField(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkField", reflect.TypeOf((*MockWalker)(nil).WalkField), arg0)
}

// WalkFieldList mocks base method
func (m *MockWalker) WalkFieldList(arg0 *ast.FieldList) {
	m.ctrl.Call(m, "WalkFieldList", arg0)
}

// WalkFieldList indicates an expected call of WalkFieldList
func (mr *MockWalkerMockRecorder) WalkFieldList(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkFieldList", reflect.TypeOf((*MockWalker)(nil).WalkFieldList), arg0)
}

// WalkFile mocks base method
func (m *MockWalker) WalkFile(arg0 *ast.File) {
	m.ctrl.Call(m, "WalkFile", arg0)
}

// WalkFile indicates an expected call of WalkFile
func (mr *MockWalkerMockRecorder) WalkFile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkFile", reflect.TypeOf((*MockWalker)(nil).WalkFile), arg0)
}

// WalkForStmt mocks base method
func (m *MockWalker) WalkForStmt(arg0 *ast.ForStmt) {
	m.ctrl.Call(m, "WalkForStmt", arg0)
}

// WalkForStmt indicates an expected call of WalkForStmt
func (mr *MockWalkerMockRecorder) WalkForStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkForStmt", reflect.TypeOf((*MockWalker)(nil).WalkForStmt), arg0)
}

// WalkFunc mocks base method
func (m *MockWalker) WalkFunc(arg0 *ast.FuncType) {
	m.ctrl.Call(m, "WalkFunc", arg0)
}

// WalkFunc indicates an expected call of WalkFunc
func (mr *MockWalkerMockRecorder) WalkFunc(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkFunc", reflect.TypeOf((*MockWalker)(nil).WalkFunc), arg0)
}

// WalkFuncDecl mocks base method
func (m *MockWalker) WalkFuncDecl(arg0 *ast.FuncDecl) {
	m.ctrl.Call(m, "WalkFuncDecl", arg0)
}

// WalkFuncDecl indicates an expected call of WalkFuncDecl
func (mr *MockWalkerMockRecorder) WalkFuncDecl(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkFuncDecl", reflect.TypeOf((*MockWalker)(nil).WalkFuncDecl), arg0)
}

// WalkFuncLit mocks base method
func (m *MockWalker) WalkFuncLit(arg0 *ast.FuncLit) {
	m.ctrl.Call(m, "WalkFuncLit", arg0)
}

// WalkFuncLit indicates an expected call of WalkFuncLit
func (mr *MockWalkerMockRecorder) WalkFuncLit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkFuncLit", reflect.TypeOf((*MockWalker)(nil).WalkFuncLit), arg0)
}

// WalkGenDecl mocks base method
func (m *MockWalker) WalkGenDecl(arg0 *ast.GenDecl) {
	m.ctrl.Call(m, "WalkGenDecl", arg0)
}

// WalkGenDecl indicates an expected call of WalkGenDecl
func (mr *MockWalkerMockRecorder) WalkGenDecl(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkGenDecl", reflect.TypeOf((*MockWalker)(nil).WalkGenDecl), arg0)
}

// WalkGoStmt mocks base method
func (m *MockWalker) WalkGoStmt(arg0 *ast.GoStmt) {
	m.ctrl.Call(m, "WalkGoStmt", arg0)
}

// WalkGoStmt indicates an expected call of WalkGoStmt
func (mr *MockWalkerMockRecorder) WalkGoStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkGoStmt", reflect.TypeOf((*MockWalker)(nil).WalkGoStmt), arg0)
}

// WalkIfStmt mocks base method
func (m *MockWalker) WalkIfStmt(arg0 *ast.IfStmt) {
	m.ctrl.Call(m, "WalkIfStmt", arg0)
}

// WalkIfStmt indicates an expected call of WalkIfStmt
func (mr *MockWalkerMockRecorder) WalkIfStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkIfStmt", reflect.TypeOf((*MockWalker)(nil).WalkIfStmt), arg0)
}

// WalkImportSpec mocks base method
func (m *MockWalker) WalkImportSpec(arg0 *ast.ImportSpec) {
	m.ctrl.Call(m, "WalkImportSpec", arg0)
}

// WalkImportSpec indicates an expected call of WalkImportSpec
func (mr *MockWalkerMockRecorder) WalkImportSpec(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkImportSpec", reflect.TypeOf((*MockWalker)(nil).WalkImportSpec), arg0)
}

// WalkIncDecStmt mocks base method
func (m *MockWalker) WalkIncDecStmt(arg0 *ast.IncDecStmt) {
	m.ctrl.Call(m, "WalkIncDecStmt", arg0)
}

// WalkIncDecStmt indicates an expected call of WalkIncDecStmt
func (mr *MockWalkerMockRecorder) WalkIncDecStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkIncDecStmt", reflect.TypeOf((*MockWalker)(nil).WalkIncDecStmt), arg0)
}

// WalkIndex mocks base method
func (m *MockWalker) WalkIndex(arg0 *ast.IndexExpr) {
	m.ctrl.Call(m, "WalkIndex", arg0)
}

// WalkIndex indicates an expected call of WalkIndex
func (mr *MockWalkerMockRecorder) WalkIndex(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkIndex", reflect.TypeOf((*MockWalker)(nil).WalkIndex), arg0)
}

// WalkInterface mocks base method
func (m *MockWalker) WalkInterface(arg0 *ast.InterfaceType) {
	m.ctrl.Call(m, "WalkInterface", arg0)
}

// WalkInterface indicates an expected call of WalkInterface
func (mr *MockWalkerMockRecorder) WalkInterface(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkInterface", reflect.TypeOf((*MockWalker)(nil).WalkInterface), arg0)
}

// WalkKeyValue mocks base method
func (m *MockWalker) WalkKeyValue(arg0 *ast.KeyValueExpr) {
	m.ctrl.Call(m, "WalkKeyValue", arg0)
}

// WalkKeyValue indicates an expected call of WalkKeyValue
func (mr *MockWalkerMockRecorder) WalkKeyValue(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkKeyValue", reflect.TypeOf((*MockWalker)(nil).WalkKeyValue), arg0)
}

// WalkLabeledStmt mocks base method
func (m *MockWalker) WalkLabeledStmt(arg0 *ast.LabeledStmt) {
	m.ctrl.Call(m, "WalkLabeledStmt", arg0)
}

// WalkLabeledStmt indicates an expected call of WalkLabeledStmt
func (mr *MockWalkerMockRecorder) WalkLabeledStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkLabeledStmt", reflect.TypeOf((*MockWalker)(nil).WalkLabeledStmt), arg0)
}

// WalkMap mocks base method
func (m *MockWalker) WalkMap(arg0 *ast.MapType) {
	m.ctrl.Call(m, "WalkMap", arg0)
}

// WalkMap indicates an expected call of WalkMap
func (mr *MockWalkerMockRecorder) WalkMap(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkMap", reflect.TypeOf((*MockWalker)(nil).WalkMap), arg0)
}

// WalkPackage mocks base method
func (m *MockWalker) WalkPackage(arg0 *ast.Package) {
	m.ctrl.Call(m, "WalkPackage", arg0)
}

// WalkPackage indicates an expected call of WalkPackage
func (mr *MockWalkerMockRecorder) WalkPackage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkPackage", reflect.TypeOf((*MockWalker)(nil).WalkPackage), arg0)
}

// WalkParen mocks base method
func (m *MockWalker) WalkParen(arg0 *ast.ParenExpr) {
	m.ctrl.Call(m, "WalkParen", arg0)
}

// WalkParen indicates an expected call of WalkParen
func (mr *MockWalkerMockRecorder) WalkParen(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkParen", reflect.TypeOf((*MockWalker)(nil).WalkParen), arg0)
}

// WalkRangeStmt mocks base method
func (m *MockWalker) WalkRangeStmt(arg0 *ast.RangeStmt) {
	m.ctrl.Call(m, "WalkRangeStmt", arg0)
}

// WalkRangeStmt indicates an expected call of WalkRangeStmt
func (mr *MockWalkerMockRecorder) WalkRangeStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkRangeStmt", reflect.TypeOf((*MockWalker)(nil).WalkRangeStmt), arg0)
}

// WalkReturnStmt mocks base method
func (m *MockWalker) WalkReturnStmt(arg0 *ast.ReturnStmt) {
	m.ctrl.Call(m, "WalkReturnStmt", arg0)
}

// WalkReturnStmt indicates an expected call of WalkReturnStmt
func (mr *MockWalkerMockRecorder) WalkReturnStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkReturnStmt", reflect.TypeOf((*MockWalker)(nil).WalkReturnStmt), arg0)
}

// WalkSelectStmt mocks base method
func (m *MockWalker) WalkSelectStmt(arg0 *ast.SelectStmt) {
	m.ctrl.Call(m, "WalkSelectStmt", arg0)
}

// WalkSelectStmt indicates an expected call of WalkSelectStmt
func (mr *MockWalkerMockRecorder) WalkSelectStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkSelectStmt", reflect.TypeOf((*MockWalker)(nil).WalkSelectStmt), arg0)
}

// WalkSelector mocks base method
func (m *MockWalker) WalkSelector(arg0 *ast.SelectorExpr) {
	m.ctrl.Call(m, "WalkSelector", arg0)
}

// WalkSelector indicates an expected call of WalkSelector
func (mr *MockWalkerMockRecorder) WalkSelector(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkSelector", reflect.TypeOf((*MockWalker)(nil).WalkSelector), arg0)
}

// WalkSendStmt mocks base method
func (m *MockWalker) WalkSendStmt(arg0 *ast.SendStmt) {
	m.ctrl.Call(m, "WalkSendStmt", arg0)
}

// WalkSendStmt indicates an expected call of WalkSendStmt
func (mr *MockWalkerMockRecorder) WalkSendStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkSendStmt", reflect.TypeOf((*MockWalker)(nil).WalkSendStmt), arg0)
}

// WalkSlice mocks base method
func (m *MockWalker) WalkSlice(arg0 *ast.SliceExpr) {
	m.ctrl.Call(m, "WalkSlice", arg0)
}

// WalkSlice indicates an expected call of WalkSlice
func (mr *MockWalkerMockRecorder) WalkSlice(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkSlice", reflect.TypeOf((*MockWalker)(nil).WalkSlice), arg0)
}

// WalkStar mocks base method
func (m *MockWalker) WalkStar(arg0 *ast.StarExpr) {
	m.ctrl.Call(m, "WalkStar", arg0)
}

// WalkStar indicates an expected call of WalkStar
func (mr *MockWalkerMockRecorder) WalkStar(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkStar", reflect.TypeOf((*MockWalker)(nil).WalkStar), arg0)
}

// WalkStruct mocks base method
func (m *MockWalker) WalkStruct(arg0 *ast.StructType) {
	m.ctrl.Call(m, "WalkStruct", arg0)
}

// WalkStruct indicates an expected call of WalkStruct
func (mr *MockWalkerMockRecorder) WalkStruct(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkStruct", reflect.TypeOf((*MockWalker)(nil).WalkStruct), arg0)
}

// WalkSwitchStmt mocks base method
func (m *MockWalker) WalkSwitchStmt(arg0 *ast.SwitchStmt) {
	m.ctrl.Call(m, "WalkSwitchStmt", arg0)
}

// WalkSwitchStmt indicates an expected call of WalkSwitchStmt
func (mr *MockWalkerMockRecorder) WalkSwitchStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkSwitchStmt", reflect.TypeOf((*MockWalker)(nil).WalkSwitchStmt), arg0)
}

// WalkTypeAssert mocks base method
func (m *MockWalker) WalkTypeAssert(arg0 *ast.TypeAssertExpr) {
	m.ctrl.Call(m, "WalkTypeAssert", arg0)
}

// WalkTypeAssert indicates an expected call of WalkTypeAssert
func (mr *MockWalkerMockRecorder) WalkTypeAssert(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkTypeAssert", reflect.TypeOf((*MockWalker)(nil).WalkTypeAssert), arg0)
}

// WalkTypeSpec mocks base method
func (m *MockWalker) WalkTypeSpec(arg0 *ast.TypeSpec) {
	m.ctrl.Call(m, "WalkTypeSpec", arg0)
}

// WalkTypeSpec indicates an expected call of WalkTypeSpec
func (mr *MockWalkerMockRecorder) WalkTypeSpec(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkTypeSpec", reflect.TypeOf((*MockWalker)(nil).WalkTypeSpec), arg0)
}

// WalkTypeSwitchStmt mocks base method
func (m *MockWalker) WalkTypeSwitchStmt(arg0 *ast.TypeSwitchStmt) {
	m.ctrl.Call(m, "WalkTypeSwitchStmt", arg0)
}

// WalkTypeSwitchStmt indicates an expected call of WalkTypeSwitchStmt
func (mr *MockWalkerMockRecorder) WalkTypeSwitchStmt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkTypeSwitchStmt", reflect.TypeOf((*MockWalker)(nil).WalkTypeSwitchStmt), arg0)
}

// WalkUnary mocks base method
func (m *MockWalker) WalkUnary(arg0 *ast.UnaryExpr) {
	m.ctrl.Call(m, "WalkUnary", arg0)
}

// WalkUnary indicates an expected call of WalkUnary
func (mr *MockWalkerMockRecorder) WalkUnary(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkUnary", reflect.TypeOf((*MockWalker)(nil).WalkUnary), arg0)
}

// WalkValueSpec mocks base method
func (m *MockWalker) WalkValueSpec(arg0 *ast.ValueSpec) {
	m.ctrl.Call(m, "WalkValueSpec", arg0)
}

// WalkValueSpec indicates an expected call of WalkValueSpec
func (mr *MockWalkerMockRecorder) WalkValueSpec(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkValueSpec", reflect.TypeOf((*MockWalker)(nil).WalkValueSpec), arg0)
}
